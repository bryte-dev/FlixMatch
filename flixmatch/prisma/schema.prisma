generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String?   // Nouveau champ username optionnel
  password String
  watchlist Watchlist[]
  reviews  Review[]  // üî• Un utilisateur peut √©crire plusieurs reviews
}

model Movie {
  id          Int        @id @default(autoincrement())
  tmdb_id     Int        @unique
  title       String
  media_type  String
  poster_path String
  watchlist   Watchlist[]  // üî• Changement en `Watchlist[]` pour autoriser plusieurs entr√©es
  reviews     Review[]  // üî• Un film peut recevoir plusieurs reviews
}

model Watchlist {
  id         Int     @id @default(autoincrement())
  movieId    Int     
  userId     Int 
  isFavorite Boolean @default(false)
  status     String  @default("WATCHLIST")
  rating     Int?    

  movie Movie @relation(fields: [movieId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([movieId, userId]) // üî• Garantit qu'un film ne peut appara√Ætre qu'une seule fois par utilisateur
}

model Review {
  id         Int       @id @default(autoincrement())
  userId     Int
  movieId    Int
  rating     Int?      // ‚¨ÖÔ∏è ‚úÖ Rend le rating optionnel
  comment    String
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  movie      Movie     @relation(fields: [movieId], references: [id])

  parentId   Int?      
  parent     Review?   @relation(name: "ReviewReplies", fields: [parentId], references: [id])
  replies    Review[]  @relation(name: "ReviewReplies")
}

enum WatchlistStatus {
  WATCHLIST
  SEEN
  JUNK
}
